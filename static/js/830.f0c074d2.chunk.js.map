{"version":3,"file":"static/js/830.f0c074d2.chunk.js","mappings":"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","sources":["../../src/record.js","../../src/realtime.js"],"sourcesContent":["import axios from 'axios';\nimport Recorder from 'recorder-core';\nimport 'recorder-core/recorder.wav.min';\n\nconst record = async options => {\n  const {\n    url,\n    sampleRate,\n    bitRate,\n    options: requestOptions,\n    onComplete\n  } = Object.assign(\n    {\n      sampleRate: 16000,\n      bitRate: 16\n    },\n    {},\n    options\n  );\n  const rec = Recorder({\n    type: 'wav',\n    sampleRate,\n    bitRate\n  });\n  return {\n    start: async () => {\n      await new Promise((resolve, reject) => {\n        rec.open(resolve, reject);\n      });\n      rec.start();\n      return { record: rec };\n    },\n    stop: async () => {\n      const file = await new Promise((resolve, reject) => {\n        rec.stop(blob => {\n          resolve(new File([blob], 'audio.wav', { type: 'audio/wav' }));\n        }, reject);\n      });\n      rec.close();\n      onComplete && onComplete({ file });\n      return url && (await axios.postForm(url, { file }, requestOptions));\n    }\n  };\n};\n\nexport default record;\n","import axios from 'axios';\nimport { v4 as uuidv4 } from 'uuid';\n\nconst getUUId = () => {\n  return uuidv4().replace(/-/g, '');\n};\n\nconst realtime = async options => {\n  const {\n    url,\n    options: requestOptions,\n    getToken,\n    getGatewayUrl,\n    sampleRate,\n    onError,\n    onChange,\n    onComplete\n  } = Object.assign(\n    {},\n    {\n      getGatewayUrl: ({ token }) => `wss://nls-gateway-cn-shanghai.aliyuncs.com/ws/v1?token=${token}`,\n      onChange: ({ message }) => {\n        console.log(message);\n      },\n      onError: () => {},\n      sampleRate: 16000\n    },\n    options\n  );\n  const taskId = getUUId();\n  let context = null;\n  return {\n    start: async () => {\n      const { token, appKey } = await getToken();\n      const messageId = getUUId();\n      const ws = new WebSocket(getGatewayUrl({ token }));\n      const resultChunks = [];\n      const chunks = [];\n      let message = '';\n      await new Promise(resolve => {\n        ws.addEventListener('open', () => {\n          console.log('socket链接成功');\n          ws.send(\n            JSON.stringify({\n              header: {\n                message_id: messageId,\n                task_id: taskId,\n                namespace: 'SpeechTranscriber',\n                name: 'StartTranscription',\n                appkey: appKey\n              },\n              payload: {\n                format: 'pcm',\n                sample_rate: 16000,\n                max_sentence_silence: 200,\n                enable_intermediate_result: true,\n                enable_punctuation_prediction: true,\n                enable_inverse_text_normalization: true\n              }\n            })\n          );\n        });\n        ws.addEventListener('message', e => {\n          const data = JSON.parse(e.data);\n          if (data.header.name === 'TranscriptionStarted') {\n            resolve();\n          }\n          if (data.header.name === 'TranscriptionResultChanged' || data.header.name === 'SentenceEnd') {\n            Object.assign(resultChunks, { [data.payload.index]: data.payload.result });\n            message = Object.keys(resultChunks)\n              .sort((a, b) => a - b)\n              .map(index => resultChunks[index])\n              .join('');\n            onChange &&\n              onChange({\n                payload: data.payload,\n                chunks: resultChunks,\n                message\n              });\n          }\n        });\n      });\n      const stream = await window.navigator.mediaDevices.getUserMedia({ audio: true }).catch(e => {\n        console.log('获取麦克风权限失败，请刷新后重试');\n        onError('获取麦克风权限失败，请刷新后重试', 'NO_MICROPHONE_PERMISSION', e);\n        throw e;\n      });\n      const recorder = new window.MediaRecorder(stream);\n      recorder.start(1000);\n\n      const audioContext = new (window.AudioContext || window.webkitAudioContext)({\n        sampleRate\n      });\n      const audioInput = audioContext.createMediaStreamSource(stream);\n      const scriptProcessor = audioContext.createScriptProcessor(2048, 1, 1);\n      scriptProcessor.onaudioprocess = function (event) {\n        const inputData = event.inputBuffer.getChannelData(0);\n        const inputData16 = new Int16Array(inputData.length);\n        for (let i = 0; i < inputData.length; ++i) {\n          inputData16[i] = Math.max(-1, Math.min(1, inputData[i])) * 0x7fff; // PCM 16-bit\n        }\n        ws.send(inputData16.buffer);\n      };\n      audioInput.connect(scriptProcessor);\n      scriptProcessor.connect(audioContext.destination);\n      const dataHandler = e => {\n        chunks.push(e.data);\n      };\n      recorder.addEventListener('dataavailable', dataHandler);\n      context = {\n        ws,\n        stream,\n        taskId,\n        messageId,\n        scriptProcessor,\n        audioInput,\n        audioContext,\n        appKey,\n        resultChunks,\n        chunks,\n        message,\n        destroy: () => {\n          ws.send(\n            JSON.stringify({\n              header: {\n                message_id: messageId,\n                task_id: taskId,\n                namespace: 'SpeechTranscriber',\n                name: 'StopTranscription',\n                appkey: appKey\n              }\n            })\n          );\n          recorder.removeEventListener('dataavailable', dataHandler);\n          ws.close();\n          scriptProcessor.disconnect();\n          audioInput.disconnect();\n          audioContext.close();\n          const tracks = (stream.getTracks && stream.getTracks()) || stream.audioTracks || [];\n          tracks.forEach(track => {\n            track.stop && track.stop();\n          });\n          stream.stop && stream.stop();\n        }\n      };\n      return context;\n    },\n    stop: async () => {\n      if (!context) {\n        return;\n      }\n      const { taskId, messageId, chunks, destroy, message } = context;\n      const file = await new Promise((resolve, reject) => {\n        const file = new File(chunks, `${taskId}.wav`, { type: 'audio/wav' });\n        onComplete && onComplete({ file, taskId, messageId, message, chunks });\n        destroy();\n        context = null;\n        resolve(file);\n      });\n      return url && (await axios.postForm(url, { file }, requestOptions));\n    }\n  };\n};\n\nexport default realtime;\n"],"names":["record","async","url","sampleRate","bitRate","options","requestOptions","onComplete","Object","assign","rec","Recorder","type","start","Promise","resolve","reject","open","stop","file","blob","File","close","axios","getUUId","v4","replace","realtime","getToken","getGatewayUrl","onError","onChange","_ref","token","_ref2","message","console","log","taskId","context","appKey","messageId","ws","WebSocket","resultChunks","chunks","addEventListener","send","JSON","stringify","header","message_id","task_id","namespace","name","appkey","payload","format","sample_rate","max_sentence_silence","enable_intermediate_result","enable_punctuation_prediction","enable_inverse_text_normalization","e","data","parse","index","result","keys","sort","a","b","map","join","stream","window","navigator","mediaDevices","getUserMedia","audio","catch","recorder","MediaRecorder","audioContext","AudioContext","webkitAudioContext","audioInput","createMediaStreamSource","scriptProcessor","createScriptProcessor","onaudioprocess","event","inputData","inputBuffer","getChannelData","inputData16","Int16Array","length","i","Math","max","min","buffer","connect","destination","dataHandler","push","destroy","removeEventListener","disconnect","getTracks","audioTracks","forEach","track"],"sourceRoot":""}