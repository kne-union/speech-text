{"version":3,"file":"static/js/161.b761bfe0.chunk.js","mappings":"8OAOAA,OAAOC,WAAaC,eAOpB,MAAMC,EAAW,CACbC,IAAK,yBAA0BC,IAAK,iEAGlCC,EAAuB,IACtBH,EAAUI,OAAQ,kBAAmBC,eAAgB,UAG5DC,EAAAA,EAAAA,QAAmB,CACfC,QAAS,CACLC,QAASL,EAAsB,kBAAmBA,EAAsB,sBAAuB,IACxFH,EAAUI,OAAQ,sBAAuBC,eAAgB,SAC7D,cAEC,IACGL,EAAUI,OAAQ,cAAeC,eAAgBN,YAKzD,MAAMU,EAAO,MAChB,MAAMC,EAAWC,IAAAA,OAAa,CAC1BC,eAAgB,WACZ,OAAO,CACX,IAGJ,OAAQC,GACAA,EAAOC,eAAe,WAAsC,oBAAlBD,EAAOE,OAC1CC,QAAQC,QAAQJ,EAAOE,OAAOG,IAAKL,EAAQ,CAAC,aAAaM,MAAMC,IAAI,CACtEA,KAAM,CACFC,KAAM,EAAGD,YAEbE,OAAOC,IACPC,EAAAA,QAAQC,MAAMF,EAAIC,SAAW,wCACtB,CAACJ,KAAM,CAACC,KAAM,IAAKK,IAAKH,EAAIC,aAGpCd,EAASG,EAEvB,EApBmB,IAuBpBc,EAAAA,EAAAA,QAAY,CACRlB,OACAmB,SAASC,EAAAA,EAAAA,KAACC,EAAAA,KAAI,CAACC,MAAO,IACPC,MAAO,CAACC,SAAU,WAAYC,KAAM,MAAOC,QAAS,OAAQC,UAAW,sBACtFX,MAAO,KACPY,OAAOR,EAAAA,EAAAA,KAACS,EAAAA,MAAK,IACbC,kBAAoBC,IAChB,MAAM,KAACpB,GAAQoB,EAIf,OAHAA,EAASpB,KAAO,CACZC,KAAoB,IAAdD,EAAKC,KAAa,IAAMD,EAAKC,KAAMK,IAAKN,EAAKM,IAAKe,QAASrB,EAAKA,MAEnEoB,CAAQ,I,+DC/DvB,MAAME,EAAgBC,IAAAA,cAuBtB,EArBYC,IAAuC,IAAtC,OAAEC,EAAM,WAAEC,KAAeC,GAAOH,EAC3C,OACIf,EAAAA,EAAAA,KAACmB,EAAAA,WAAU,CAAAC,UACTpB,EAAAA,EAAAA,KAACa,EAAa,IACNK,EACJG,MAAO,CACL,CACEC,IAAK,aACLC,KAAM,IACNC,MAAO,iBAGXR,OAAQA,EACRC,WAAYA,EACZQ,OAAQA,EAAAA,QACRC,UAAW,CAAEC,KAAM,SAEZ,ECnBNC,EAAAA,WAAoBC,SAASC,eAAe,SAMpDC,QACD/B,EAAAA,EAAAA,KAACgC,IAAAA,WAAgB,CAAAZ,UACfpB,EAAAA,EAAAA,KAACiC,EAAG,CAACjB,OAAQ,CAAEpC,KAAK,GAAGqC,WANV,CACjBiB,aAAc,e,oECLhB,MAiRA,EAjRqB,CACjBC,KAAM,cACNC,QAAS,oNAMTC,YAAa,yDACbC,YAAa,mBACbC,IAAK,0/FA8HLC,QAAS,CACLC,QAAQ,EACRC,UAAW,oBACXvC,MAAO,oGAKPwC,KAAM,CAAC,CACXnB,MAAO,mDACPa,YAAa,mDACb7C,KAAM,6oDAqCNoD,MAAO,CAAC,CACRT,KAAM,cACNG,YAAa,+BACbO,gBAAiB,6DACjBC,UAAW,GACb,CACEX,KAAM,OACNG,YAAa,OACbQ,UAAW,KAEb,CACEtB,MAAO,uCACPa,YAAa,uCACb7C,KAAM,y7DA2DNoD,MAAO,CAAC,CACRT,KAAM,cACNG,YAAa,+BACbO,gBAAiB,6DACjBC,UAAW,GACb,CACEX,KAAM,OACNG,YAAa,OACbQ,UAAW,GACb,CACEX,KAAM,SACNG,YAAa,QACbQ,UAAW,O","sources":["preset.js","App.js","bootstrap.js","../../README.md"],"sourcesContent":["import React from 'react';\nimport {preset as fetchPreset} from '@kne/react-fetch';\nimport {Spin, Empty, message} from 'antd';\nimport axios from 'axios';\nimport {preset as remoteLoaderPreset} from '@kne/remote-loader';\nimport omit from 'lodash/omit';\n\nwindow.PUBLIC_URL = process.env.PUBLIC_URL;\n\n// url: 'https://registry.npmmirror.com',\n// tpl: '{{url}}/@kne-components%2f{{remote}}/{{version}}/files/build',\n\n// url: 'https://cdn.jsdelivr.net', tpl: '{{url}}/npm/@kne-components/{{remote}}@{{version}}/build'\n\nconst registry = {\n    url: \"https://uc.fatalent.cn\", tpl: \"{{url}}/packages/@kne-components/{{remote}}/{{version}}/build\"\n};\n\nconst componentsCoreRemote = {\n    ...registry, remote: 'components-core', defaultVersion: '0.3.0'\n};\n\nremoteLoaderPreset({\n    remotes: {\n        default: componentsCoreRemote, 'components-core': componentsCoreRemote, 'components-iconfont': {\n            ...registry, remote: 'components-iconfont', defaultVersion: '0.1.8'\n        }, 'speech-text': process.env.NODE_ENV === 'development' ? {\n            remote: 'speech-text', url: '/', tpl: '{{url}}'\n        } : {\n            ...registry, remote: 'speech-text', defaultVersion: process.env.DEFAULT_VERSION\n        }\n    }\n});\n\nexport const ajax = (() => {\n    const instance = axios.create({\n        validateStatus: function () {\n            return true;\n        }\n    });\n\n    return (params) => {\n        if (params.hasOwnProperty('loader') && typeof params.loader === 'function') {\n            return Promise.resolve(params.loader(omit(params, ['loader']))).then((data) => ({\n                data: {\n                    code: 0, data\n                }\n            })).catch((err) => {\n                message.error(err.message || '请求发生错误');\n                return {data: {code: 500, msg: err.message}};\n            });\n        }\n        return instance(params);\n    };\n})();\n\n\nfetchPreset({\n    ajax,\n    loading: <Spin delay={500}\n                   style={{position: 'absolute', left: '50%', padding: '10px', transform: 'translateX(-50%)'}}/>,\n    error: null,\n    empty: <Empty/>,\n    transformResponse: (response) => {\n        const {data} = response;\n        response.data = {\n            code: data.code === 0 ? 200 : data.code, msg: data.msg, results: data.data\n        };\n        return response;\n    }\n});\n","import { HashRouter } from \"react-router-dom\";\nimport createEntry from \"@kne/modules-dev/dist/create-entry\";\nimport \"@kne/modules-dev/dist/create-entry.css\";\nimport readme from \"readme\";\n\nconst ExampleRoutes = createEntry.ExampleRoutes;\n\nconst App = ({ preset, themeToken, ...props }) => {\n  return (\n      <HashRouter>\n        <ExampleRoutes\n            {...props}\n            paths={[\n              {\n                key: \"components\",\n                path: \"/\",\n                title: \"首页\",\n              },\n            ]}\n            preset={preset}\n            themeToken={themeToken}\n            readme={readme}\n            pageProps={{ menu: null }}\n        />\n      </HashRouter>\n  );\n};\n\nexport default App;\n","import { ajax } from \"./preset\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom/client\";\nimport App from \"./App\";\n\nconst root = ReactDOM.createRoot(document.getElementById(\"root\"));\n\nconst themeToken = {\n  colorPrimary: \"#4F185A\",\n};\n\nroot.render(\n    <React.StrictMode>\n      <App preset={{ ajax }} themeToken={themeToken} />\n    </React.StrictMode>\n);\n","import * as component_1 from '@kne/current-lib_speech-text';\nimport * as component_2 from 'antd';\nimport * as component_3 from 'axios';\nconst readmeConfig = {\n    name: `speech-text`,\n    summary: `<h1>speech-text</h1>\n<h3>描述</h3>\n<p>对接阿里语音转文字</p>\n<h3>安装</h3>\n<pre><code class=\"language-shell\">npm i --save @kne/speech-text\n</code></pre>`,\n    description: `对接阿里语音转文字`,\n    packageName: `@kne/speech-text`,\n    api: `<h4>默认导出 speech(options):Promise</h4>\n<p>上传语音文件识别</p>\n<p>example:</p>\n<pre><code class=\"language-javascript\">const { start, stop } = await speech(options);\n</code></pre>\n<h4>options:Object</h4>\n<table>\n<thead>\n<tr>\n<th>属性名</th>\n<th>说明</th>\n<th>类型</th>\n<th>默认值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>url</td>\n<td>上传文件语音识别目标接口地址</td>\n<td>string</td>\n<td>-</td>\n</tr>\n</tbody>\n</table>\n<h4>开始录音 start():Promise</h4>\n<p>example:</p>\n<pre><code class=\"language-javascript\">await start();\n</code></pre>\n<h4>结束录音 stop():Promise</h4>\n<p>example:</p>\n<pre><code class=\"language-javascript\">const response = await stop();\nconst { code, message } = response.data;\n</code></pre>\n<table>\n<thead>\n<tr>\n<th>属性名</th>\n<th>说明</th>\n<th>类型</th>\n<th>默认值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>code</td>\n<td>后端接口返回状态值,200为成功</td>\n<td>number</td>\n<td>-</td>\n</tr>\n<tr>\n<td>message</td>\n<td>语音转换结果</td>\n<td>string</td>\n<td>-</td>\n</tr>\n</tbody>\n</table>\n<h3>speechTextRealTime(options):Promise</h3>\n<p>实时语音识别</p>\n<p>example:</p>\n<pre><code class=\"language-javascript\">const { start, stop } = await speechTextRealTime(options);\n</code></pre>\n<h4>options:Object</h4>\n<table>\n<thead>\n<tr>\n<th>属性名</th>\n<th>说明</th>\n<th>类型</th>\n<th>默认值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>getToken</td>\n<td>获取Token方法:getToken():{token,appKey}</td>\n<td>function</td>\n<td>-</td>\n</tr>\n<tr>\n<td>onChange</td>\n<td>识别文本内容发生变化时回调函数</td>\n<td>function</td>\n<td>({message}) =&gt; {console.log(message);}</td>\n</tr>\n<tr>\n<td>onError</td>\n<td>错误处理</td>\n<td>function(message,type,error)</td>\n<td>-</td>\n</tr>\n<tr>\n<td>getGatewayUrl</td>\n<td>获取WebSocket的url地址: getGatewayUrl({token}):url,可以获取到token参数</td>\n<td>function</td>\n<td>-</td>\n</tr>\n<tr>\n<td>onComplete</td>\n<td>录音结束回调方法</td>\n<td>function</td>\n<td>-</td>\n</tr>\n<tr>\n<td>url</td>\n<td>保存录音文件url</td>\n<td>string</td>\n<td>-</td>\n</tr>\n</tbody>\n</table>\n<h4>开始录音 start():Promise</h4>\n<p>example:</p>\n<pre><code class=\"language-javascript\">await start({\n  getToken: () =&gt; {\n  },\n  onChange: ({ message }) =&gt; {\n  },\n  onComplete: ({ file, taskId, messageId, message, chunks }) =&gt; {\n  }\n});\n</code></pre>\n<h4>结束录音 stop():Promise</h4>\n<p>example:</p>\n<pre><code class=\"language-javascript\">await stop();\n</code></pre>`,\n    example: {\n        isFull: true,\n        className: `speech_text_e4cb6`,\n        style: `.speech_text_e4cb6 .ant-card {\n  border-color: black;\n  text-align: center;\n  width: 200px;\n}`,\n        list: [{\n    title: `录音文件上传识别`,\n    description: `录音文件上传识别`,\n    code: `const {default: speech} = _SpeechText;\nconst {Button, Alert, Flex} = antd;\nconst {useState, useEffect, useRef} = React;\n\nconst BaseExample = () => {\n    const [message, setMessage] = useState({type: 'info', message: '尚未开始'});\n    const [recording, setRecording] = useState(false);\n    const recordRef = useRef(null);\n    useEffect(() => {\n        recordRef.current = speech({url: 'https://ct.deeperagi.com/action/papi/ai/vCMA01/uploadWavFile'});\n    }, []);\n    return <Flex vertical gap={10}>\n        <Alert type={message.type} message={message.message}/>\n        <div>\n            <Button onClick={() => {\n                recordRef.current.then(async ({start, stop}) => {\n                    setMessage({type: 'warning', message: '正在识别，请稍等'});\n                    if (recording) {\n                        const {data} = await stop();\n                        if (data.code === 200) {\n                            setMessage({type: 'success', message: data.message || '未识别到语音内容'});\n                        } else {\n                            setMessage({type: 'error', message: '转换错误'});\n                        }\n                    } else {\n                        setMessage({type: 'warning', message: '开始语音识别'});\n                        start();\n                    }\n                    setRecording(!recording);\n                });\n            }}>{recording ? '正在录制' : '点击开始'}</Button>\n        </div>\n    </Flex>;\n};\n\nrender(<BaseExample/>);\n`,\n    scope: [{\n    name: \"_SpeechText\",\n    packageName: \"@kne/current-lib_speech-text\",\n    importStatement: \"import * as _SpeechText from \\\"@kne-components/speech-text\\\"\",\n    component: component_1\n},{\n    name: \"antd\",\n    packageName: \"antd\",\n    component: component_2\n}]\n},{\n    title: `实时语音识别`,\n    description: `实时语音识别`,\n    code: `const {speechTextRealTime} = _SpeechText;\nconst {Button, Alert, Flex} = antd;\nconst {default: axios} = _axios;\nconst {useState, useEffect, useRef} = React;\n\nconst BaseExample = () => {\n  const [message, setMessage] = useState({type: 'info', message: '尚未开始'});\n  const [recording, setRecording] = useState(false);\n  const recordRef = useRef(null);\n  useEffect(() => {\n    recordRef.current = speechTextRealTime({\n      getToken: async () => {\n        try {\n          const {data} = await axios({\n            url: 'https://ct.deeperagi.com/action/papi/ai/vCMA02/createToken',\n            method: 'POST',\n            data: JSON.stringify({\n              \"avgtype\": \"11111\"\n            }),\n            headers: {\n              'content-type': 'application/json'\n            }\n          });\n          return {\n            token: data.token, appKey: data.appKey\n          };\n        } catch (e) {\n          return {\n            \"appKey\": \"TYcsiL5CZb9hd9DR\", \"token\": \"e80b7d7f6f054f91a79a14a67cb7f34c\"\n          };\n        }\n      }, onChange: ({message}) => {\n        setMessage({type: 'success', message});\n      }\n    });\n  }, []);\n\n  return <Flex vertical gap={10}>\n    <Alert type={message.type} message={message.message}/>\n    <div>\n      <Button onClick={() => {\n        recordRef.current.then(async ({start, stop}) => {\n          setMessage({type: 'warning', message: '正在识别，请稍等'});\n          if (recording) {\n            await stop();\n            setMessage({type: 'info', message: '识别结束'});\n          } else {\n            setMessage({type: 'warning', message: '开始语音识别'});\n            start();\n          }\n          setRecording(!recording);\n        });\n      }}>{recording ? '正在录制' : '点击开始'}</Button>\n    </div>\n  </Flex>;\n};\n\nrender(<BaseExample/>);\n`,\n    scope: [{\n    name: \"_SpeechText\",\n    packageName: \"@kne/current-lib_speech-text\",\n    importStatement: \"import * as _SpeechText from \\\"@kne-components/speech-text\\\"\",\n    component: component_1\n},{\n    name: \"antd\",\n    packageName: \"antd\",\n    component: component_2\n},{\n    name: \"_axios\",\n    packageName: \"axios\",\n    component: component_3\n}]\n}]\n    }\n};\nexport default readmeConfig;\n"],"names":["window","PUBLIC_URL","process","registry","url","tpl","componentsCoreRemote","remote","defaultVersion","remoteLoaderPreset","remotes","default","ajax","instance","axios","validateStatus","params","hasOwnProperty","loader","Promise","resolve","omit","then","data","code","catch","err","message","error","msg","fetchPreset","loading","_jsx","Spin","delay","style","position","left","padding","transform","empty","Empty","transformResponse","response","results","ExampleRoutes","createEntry","_ref","preset","themeToken","props","HashRouter","children","paths","key","path","title","readme","pageProps","menu","ReactDOM","document","getElementById","render","React","App","colorPrimary","name","summary","description","packageName","api","example","isFull","className","list","scope","importStatement","component"],"sourceRoot":""}